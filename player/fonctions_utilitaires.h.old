#pragma once
#include "headers.h"

/** Fonction test qui genere une image de synthese ou lit une image de test */
void FausseImage(const FrameSource::Parameters& config, ContextGuard& context, Application &app, vx_image& image, const char* name){
  vx_image base_image;
  
  //std::string fileName1 = app.findSampleFilePath("synthese_pont.jpg");
  std::string fileName1 = app.findSampleFilePath(name);
  //cv::Mat cvmat = nvx_cv::VXImageToCVMatMapper(base_image, 0, 0, VX_READ_AND_WRITE, VX_MEMORY_TYPE_HOST).getMat(); 
  cv::Mat cvmat = cv::imread(fileName1, cv::IMREAD_GRAYSCALE);
  base_image = nvx_cv::createVXImageFromCVMat(context, cvmat);
  vxuScaleImage(context, base_image, image, NVXCU_INTERPOLATION_TYPE_BILINEAR);
  vxReleaseImage(&base_image);
  cvmat.release();
}

void ResetImage(const FrameSource::Parameters& config, ContextGuard& context, vx_image image){
  vx_rectangle_t rect;
  rect.start_x = 0; rect.start_y = 0; rect.end_x = config.frameWidth; rect.end_y = config.frameHeight;
  //vx_image tmp1 = vxCreateImageFromROI(image, &rect);
  vx_image tmp1 = vxCreateImage(context, config.frameWidth, config.frameHeight, VX_DF_IMAGE_U8);
  vx_image tmp2 = vxCreateImage(context, config.frameWidth, config.frameHeight, VX_DF_IMAGE_U8);
  vxuAbsDiff(context, tmp1, tmp2, image);
  vxReleaseImage(&tmp1);
  vxReleaseImage(&tmp2);
}

void CopyPartialImage(const FrameSource::Parameters& config, ContextGuard& context, const vx_image& src, vx_image dst, vx_uint32 x, vx_uint32 y, vx_uint32 w, vx_uint32 h){
  vx_rectangle_t rect;
  rect.start_x = x; rect.start_y = y; rect.end_x = x + w; rect.end_y = y + h;
  vx_image tmp1 = vxCreateImageFromROI(src, &rect);
  vx_image tmp2 = vxCreateImageFromROI(dst, &rect);
  nvxuCopyImage(context, tmp1, tmp2);
  vxReleaseImage(&tmp1);
  vxReleaseImage(&tmp2);
}